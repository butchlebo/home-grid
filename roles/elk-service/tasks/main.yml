---

- name: Check if elasticsearch service is running
  shell: docker service ls | awk '{print $2}' | grep elasticsearch
  changed_when: false
  register: elastic_status
  failed_when: elastic_status.rc == 2

- name: Create volume directory for elk
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk
    state: directory
    mode: 0777
  when: elastic_status.rc==1

- name: Create volume directory for elasticsearch
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk/elasticsearch
    state: directory
    mode: 0777
  when: elastic_status.rc==1


- name: Deploy elasticsearch service
  hosts: docker-manager
  command: |
    docker service create -d \
    --name elasticsearch \
    --network mangonet \
    --mount type=bind,src=/srv/docker-volumes/elk/elasticsearch,dst=/usr/share/elasticsearch/data \
    --replicas 1 \
    --publish 9200:9200 --publish 9300:9300 -e "discovery.type=single-node" \
    docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.3
  when: elastic_status.rc==1

- name: Wait for elasticsearch startup
  wait_for:
    port: 9200
    timeout: 5000

- name: Register elasticsearch name with Route53
  connection: local
  route53:
    state: present
    zone: sysmango.net
    record: elasticsearch.sysmango.net
    type: A
    value: 192.168.1.143,192.168.1.224,192.168.1.201
    overwrite: "yes"
    wait: "yes"

- name: Check if kibana service is running
  shell: docker service ls | awk '{print $2}' | grep kibana
  changed_when: false
  register: kibana_status
  failed_when: kibana_status.rc == 2

- name: Create volume directory for kibana
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk/kibana
    state: directory
    mode: 0777
  when: kibana_status.rc == 1

- name: Create volume directory for kibana
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk/kibana/data
    state: directory
    mode: 0777
  when: kibana_status.rc == 1


- name: Deploy kibana service
  hosts: docker-manager
  command: |
    docker service create -d \
    --name kibana \
    --network mangonet \
    --publish 5601:5601 \
    --mount type=bind,src=/srv/docker-volumes/elk/kibana/data,dst=/var/lib/kibana \
    --replicas 1 \
    docker.elastic.co/kibana/kibana-oss:6.1.3
  when: kibana_status.rc == 1

- name: Wait for kibana startup
  wait_for:
    port: 5601
    timeout: 5000

# Defaults
# --env=SERVER_NAME=kibana.sysmango.net
# --env=ELASTICSEARCH_URL=http://elasticsearch

- name: Register kibana name with Route53
  connection: local
  route53:
    state: present
    zone: sysmango.net
    record: kibana.sysmango.net
    type: A
    value: 192.168.1.143,192.168.1.224,192.168.1.201
    overwrite: "yes"
    wait: "yes"

- name: Check if logstash service is running
  shell: docker service ls | awk '{print $2}' | grep logstash
  changed_when: false
  register: logstash_status
  failed_when: logstash_status.rc == 2

- name: Create volume directory for logstash
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk/logstash
    state: directory
    mode: 0777
  when: logstash_status.rc == 1

- name: Create volume directory for logstash pipelines
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk/logstash/pipeline
    state: directory
    mode: 0777
  when: logstash_status.rc == 1

- name: Deploy logstash beat pipline configuration
  hosts: nfs-server[0]
  become: "yes"
  copy:
    src: logstash.conf
    dest: /srv/nfs/elk/logstash/pipeline/logstash.conf 

- name: Deploy logstash service
  hosts: docker-manager
  command: |
    docker service create -d \
    --name logstash \
    --network mangonet \
    --publish 5044:5044 --publish 9600:9600 \
    --publish 5014:5014 \
    --mount type=bind,src=/srv/docker-volumes/elk/logstash/pipeline/,dst=/usr/share/logstash/pipeline/ \
    --replicas 1 \
    docker.elastic.co/logstash/logstash-oss:6.1.3
  when: logstash_status.rc == 1

- name: Register logstash name with Route53
  connection: local
  route53:
    state: present
    zone: sysmango.net
    record: logstash.sysmango.net
    type: A
    value: 192.168.1.143,192.168.1.224,192.168.1.201
    overwrite: "yes"
    wait: "yes"

# - name: Check if dockbeat service is running
#   shell: docker service ls | awk '{print $2}' | grep dockbeat
#   changed_when: false
#   register: dockbeat_status
#   failed_when: dockbeat_status.rc == 2

# - name: Deploy dockbeat service
#   hosts: docker-manager
#   command: |
#     docker service create -d \
#     --name dockbeat \
#     --network mangonet \
#     --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
#     --mode=global \
#     ingensi/dockbeat:latest
#   when: dockbeat_status.rc == 1

- name: Check if metricbeat service is running
  shell: docker service ls | awk '{print $2}' | grep metricbeat
  changed_when: false
  register: metric_status
  failed_when: metric_status.rc == 2

- name: Create volume directory for metricbeat
  hosts: nfs-server[0]
  become: "yes"
  file:
    path: /srv/nfs/elk/metricbeat
    state: directory
    mode: 0777
  when: metric_status.rc==1

- name: Deploy metricbeat configuration file 
  hosts: nfs-server[0]
  copy: 
    src: metricbeat.yml
    dest: /srv/nfs/elk/metricbeat/metricbeat.yml
  when: metric_status.rc == 1

- name: Install metricbeat index to elasticsearch
  hosts: docker-master
  command: docker run docker.elastic.co/beats/metricbeat:6.1.3 setup --template -E output.logstash.enabled=false -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
  when: metric_status.rc == 1

- name: Setup metricsearch kibana dashboards
  hosts: docker-master
  command: docker run docker.elastic.co/beats/metricbeat:6.1.3 setup --dashboards
  when: metric_status.rc == 1

- name: Deploy metricbeat service
  hosts: docker-manager
  command: |
    docker service create -d \
    --name metricbeat \
    --network mangonet \
    --mount type=bind,src=/srv/docker-volumes/elk/metricbeat/metricbeat.yml,dst=/usr/share/metricbeat/metricbeat.yml \
    --mode global \
    docker.elastic.co/beats/metricbeat:6.1.3
  when: metric_status.rc == 1
